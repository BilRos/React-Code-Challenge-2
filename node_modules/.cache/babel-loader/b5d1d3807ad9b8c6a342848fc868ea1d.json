{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/billy/Challenge-2-Bot-Battlr-021023/Challenge-2-Bot-Battlr/code-challenge/src/components/BotsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\"; //import axios from 'axios'\n\nimport BotSpecs from './BotSpecs';\nimport SortBar from \"./SortBar\";\n\nfunction BotsPage() {\n  _s();\n\n  //start here with your code for step one\n  const [bots, setBots] = useState([]);\n  const [selectedBots, setselectedBots] = useState([]);\n  const [showBots, setShowBots] = useState(false);\n  const [myArmy, setMyArmy] = useState([]);\n  const [category, setCategory] = useState('');\n  useEffect(() => {\n    /*axios.get*/\n    fetch(`http://localhost:8002/bots`).then(res => setBots(res.data)).catch(error => console.error(error`Could not fetch bots`));\n  }, []);\n\n  function handleSelect(botSelected) {\n    setselectedBots(botSelected);\n    setShowBots(true);\n  }\n\n  function handleGoBack() {\n    setShowBots(false);\n    setselectedBots(null);\n  }\n\n  function handleEnlist(botEnlisted) {\n    if (!myArmy.find(bot => bot.id === botEnlisted.id)) setMyArmy([...myArmy, botEnlisted]);\n  }\n\n  function deleteFromMyArmy(selectedBot) {\n    const updatedArmy = myArmy.filter(bot => bot.id !== selectedBot.id);\n    setMyArmy(updatedArmy);\n  }\n\n  function deleteBot(deletedBot) {\n    const filteredBots = bots.filter(bot => bot.id !== deletedBot.id);\n    setBots(filteredBots);\n    const updatedMyArmy = myArmy.filter(bot => bot.id !== deletedBot.id);\n    setMyArmy(updatedMyArmy);\n  }\n\n  const sortedBots = useMemo(() => {\n    let sortedItems = [...bots];\n\n    if (category === 'armor') {\n      sortedItems.sort((a, b) => b.armor - a.armor);\n    } else if (category === 'health') {\n      sortedItems.sort((a, b) => b.health - a.health);\n    } else if (category === 'damage') {\n      sortedItems.sort((a, b) => b.damage - a.damage);\n    }\n\n    return sortedItems;\n  }, [category, bots]);\n\n  function sortByArmor() {\n    setCategory('armor');\n  }\n\n  function sortByDamage() {\n    setCategory('damage');\n  }\n\n  function sortByHealth() {\n    setCategory('health');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      bots: myArmy,\n      removeBot: deleteFromMyArmy,\n      deleteBot: deleteBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this), showBots ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: selectedBots,\n      handleGoBack: handleGoBack,\n      handleEnlist: handleEnlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SortBar, {\n        sortByArmor: sortByArmor,\n        sortByDamage: sortByDamage,\n        sortByHealth: sortByHealth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n        bots: sortedBots,\n        handleSelect: handleSelect,\n        deleteBot: deleteBot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 3\n  }, this);\n}\n\n_s(BotsPage, \"hPIj9QZrDkG9kZ8NijJIK50uxhY=\");\n\n_c = BotsPage;\nexport default BotsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"sources":["/home/billy/Challenge-2-Bot-Battlr-021023/Challenge-2-Bot-Battlr/code-challenge/src/components/BotsPage.js"],"names":["React","useState","useEffect","useMemo","YourBotArmy","BotCollection","BotSpecs","SortBar","BotsPage","bots","setBots","selectedBots","setselectedBots","showBots","setShowBots","myArmy","setMyArmy","category","setCategory","fetch","then","res","data","catch","error","console","handleSelect","botSelected","handleGoBack","handleEnlist","botEnlisted","find","bot","id","deleteFromMyArmy","selectedBot","updatedArmy","filter","deleteBot","deletedBot","filteredBots","updatedMyArmy","sortedBots","sortedItems","sort","a","b","armor","health","damage","sortByArmor","sortByDamage","sortByHealth"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useMemo}from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\n//import axios from 'axios'\nimport BotSpecs from './BotSpecs';\nimport SortBar from \"./SortBar\";\n\nfunction BotsPage() {\n  //start here with your code for step one\n  const [bots, setBots] = useState([]);\n  const [selectedBots, setselectedBots] = useState([]);\n  const [showBots, setShowBots] = useState(false);\n  const [myArmy, setMyArmy] = useState([]);\n  const [category, setCategory] = useState('');\n\n  useEffect(()=>{\n    /*axios.get*/fetch(`http://localhost:8002/bots`)\n    .then(res => setBots(res.data))\n    .catch(error=> console.error(error `Could not fetch bots`))\n  },[])\n  function handleSelect(botSelected){\n    setselectedBots(botSelected);\n    setShowBots(true)\n  }\n  function handleGoBack(){\n    setShowBots(false)\n    setselectedBots(null)\n    \n  }\n  function handleEnlist(botEnlisted){\n    if(!myArmy.find(bot => bot.id === botEnlisted.id))\n    setMyArmy([...myArmy,botEnlisted])\n  \n}\nfunction deleteFromMyArmy(selectedBot){\n  const updatedArmy = myArmy.filter(bot=> bot.id !== selectedBot.id);\n  setMyArmy(updatedArmy)\n}\nfunction deleteBot(deletedBot){\n  const filteredBots =  bots.filter(bot=> bot.id !== deletedBot.id)\n  setBots(filteredBots)\n\n  const updatedMyArmy = myArmy.filter(bot=> bot.id !== deletedBot.id);\n  setMyArmy(updatedMyArmy)\n}\nconst sortedBots = useMemo(()=>{\n  let sortedItems = [...bots]\n  if(category === 'armor'){\n    sortedItems.sort((a,b) => b.armor - a.armor)\n  } else if (category === 'health'){\n    sortedItems.sort((a,b) => b.health - a.health)\n  } else if(category === 'damage'){\n    sortedItems.sort((a,b)=> b.damage - a.damage)\n  } \n  return sortedItems\n\n},[category, bots])\n\nfunction sortByArmor(){\nsetCategory('armor')\n}\nfunction sortByDamage(){\n  setCategory('damage')\n\n}\nfunction sortByHealth(){\n  setCategory('health')\n}\n\n\nreturn ( \n  <div>\n    <YourBotArmy \n      bots={myArmy} \n      removeBot={deleteFromMyArmy}\n      deleteBot={deleteBot}/>\n    {showBots ? <BotSpecs \n      bot={selectedBots}\n      handleGoBack={handleGoBack}\n      handleEnlist={handleEnlist}\n    /> : \n    <>\n    <SortBar sortByArmor={sortByArmor} sortByDamage={sortByDamage} sortByHealth={sortByHealth}/>\n    <BotCollection  bots={sortedBots}\n      handleSelect={handleSelect}\n      deleteBot={deleteBot}/>\n    </>\n    }\n  </div>\n\n)\n}\n\nexport default BotsPage;\n"]},"metadata":{},"sourceType":"module"}